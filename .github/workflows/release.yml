name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  GO_VERSION: '1.24.x'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        
        # Save changelog to file and output
        echo "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in ${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Binary Downloads
          Download the appropriate binary for your platform from the assets below.
          
          ### Using Go
          ```bash
          go install github.com/italoag/ghcloner/cmd/ghclone@${{ steps.version.outputs.version }}
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/italoag/ghclone:${{ steps.version.outputs.version }}
          ```
          
          ## Verification
          All binaries are signed and checksums are provided for verification.
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        export BINARY_NAME=ghclone
        if [ "$GOOS" = "windows" ]; then
          export BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        mkdir -p dist
        
        go build \
          -ldflags="-w -s -X main.version=${{ needs.create-release.outputs.version }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o dist/${BINARY_NAME} \
          ./cmd/ghclone

    - name: Create archive
      run: |
        cd dist
        BINARY_NAME=ghclone
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
          ARCHIVE_NAME="ghclone-${{ needs.create-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
          zip "${ARCHIVE_NAME}" "${BINARY_NAME}"
        else
          ARCHIVE_NAME="ghclone-${{ needs.create-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
          tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}"
        fi
        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
        echo "ARCHIVE_PATH=dist/${ARCHIVE_NAME}" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_PATH }}
        asset_name: ${{ env.ARCHIVE_NAME }}
        asset_content_type: application/octet-stream

  generate-checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get release assets
      id: assets
      run: |
        # Download release assets to generate checksums
        mkdir -p checksums
        cd checksums
        
        # Get all release assets
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.create-release.outputs.version }} | \
             jq -r '.assets[] | select(.name | test("\\.(tar\\.gz|zip)$")) | .browser_download_url' | \
             xargs -I {} wget {}

    - name: Generate checksums
      run: |
        cd checksums
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: checksums/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/ghclone
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.create-release.outputs.version }}
          GIT_REV=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, generate-checksums, docker-build]
    if: always()
    steps:
    - name: Release Summary
      run: |
        echo "üöÄ Release ${{ needs.create-release.outputs.version }} completed!"
        echo "üì¶ Binaries built for multiple platforms"
        echo "üê≥ Docker images pushed to ghcr.io"
        echo "üîç Checksums generated for verification"
        echo ""
        echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"
