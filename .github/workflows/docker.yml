name: Docker

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/ghclone
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Get version info
      id: version
      run: |
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
        fi
        echo "GIT_REV=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}
          GIT_REV=${{ steps.version.outputs.GIT_REV }}
          BUILD_DATE=${{ steps.version.outputs.BUILD_DATE }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/ghclone:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Test Docker image
      run: |
        # Test that the image runs correctly
        docker run --rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/ghclone:${{ steps.meta.outputs.version }} --help || true

  multi-arch-test:
    name: Multi-Architecture Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/ghclone

    - name: Test image on ${{ matrix.platform }}
      run: |
        # Test the specific platform image
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/ghclone:${{ steps.meta.outputs.version }} \
          --help || true

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build, multi-arch-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Delete old images
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const packageName = 'ghclone';
          
          try {
            // Get all versions of the package
            const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
              username: owner,
              package_type: 'container',
              package_name: packageName,
              per_page: 100
            });
            
            // Keep the 10 most recent versions and delete the rest
            const versionsToDelete = versions.data
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10);
            
            for (const version of versionsToDelete) {
              // Skip tagged versions (releases)
              if (version.metadata && version.metadata.container && version.metadata.container.tags.length > 0) {
                const hasReleaseTag = version.metadata.container.tags.some(tag => 
                  tag.match(/^v?\d+\.\d+\.\d+/) || tag === 'latest'
                );
                if (hasReleaseTag) {
                  console.log(`Skipping version ${version.id} with release tags: ${version.metadata.container.tags.join(', ')}`);
                  continue;
                }
              }
              
              try {
                await github.rest.packages.deletePackageVersionForUser({
                  username: owner,
                  package_type: 'container',
                  package_name: packageName,
                  package_version_id: version.id
                });
                console.log(`Deleted version ${version.id}`);
              } catch (error) {
                console.log(`Failed to delete version ${version.id}: ${error.message}`);
              }
            }
          } catch (error) {
            console.log(`Error managing package versions: ${error.message}`);
          }